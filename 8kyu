--8 kyu Multiply SQL:
SELECT (price * amount) AS total FROM items

--8 kyu Easy SQL - Ordering SQL:
select * FROM companies
order by employees desc

--8 kyu Beginner Series #2 Clock SQL:
select (h*60*60*1000 + m*60*1000 + s*1000) as res from past

--8 kyu Opposite number SQL:
-- You will be given a table: "opposite", with a column: "number". Return a table with a column: "res".
SELECT (number*-1) as res from opposite

--8 kyu Adults only (SQL for Beginners #1) SQL:
--Your code here
SELECT * FROM users
where age >= 18

--8 kyu SQL Basics: Simple DISTINCT SQL:
-- Create your SELECT statement here
SELECT DISTINCT(age) FROM people

--8 kyu Keep Hydrated! SQL:
SELECT id, hours, FLOOR(hours*0.5) as liters FROM cycling

--8 kyu Easy SQL: Square Root and Log SQL:
/* SQL */
select SQRT(number1) as root, log10(number2) as log from decimals

--8 kyu SQL Basics: Mod SQL:
/*  SQL  */
select MOD(number1,number2) as mod from decimals

--8 kyu Easy SQL: Rounding Decimals SQL:
/*  SQL  */
SELECT FLOOR(number1) as number1, CEILING(number2) as number2 FROM decimals

--8 kyu 1. Find all active students SQL:
-- Type your query here
SELECT * FROM students
WHERE IsActive = 1

--8 kyu SQL Basics: Simple WHERE and ORDER BY SQL:
-- Create your SELECT statement here
SELECT * FROM people 
WHERE age > 50 
ORDER BY age desc

--8 kyu SQL Basics: Simple SUM SQL:
SELECT SUM(age) as age_sum FROM people 

--8 kyu SQL Basics: Simple MIN / MAX SQL:
SELECT MIN(age) as age_min, MAX(age) as age_max FROM people

--8 kyu SQL Grasshopper: Select Columns SQL:
SELECT custid, custname, custstate FROM customers

--8 kyu On the Canadian Border (SQL for Beginners #2) SQL:
SELECT name, country FROM travelers 
WHERE country NOT IN ('Canada', 'Mexico', 'USA')

--8 kyu Register for the Party (SQL for Beginners #3) SQL:
INSERT INTO participants
VALUES ('MyName', 22, True);
SELECT * FROM participants;

--8 kyu Collect Tuition (SQL for Beginners #4) SQL:
SELECT * FROM students 
WHERE tuition_received = FALSE

--8 kyu Easy SQL: LowerCase SQL:
SELECT id, name, birthday, LOWER(race) as race FROM demographics

--8 kyu Returning Strings SQL:
SELECT ('Hello, ' || name || ' how are you doing today?') as greeting FROM  person


--8 kyu Grasshopper - Messi goals function SQL:
-- you will be given a table, goals, with columns la_liga_goals, copa_del_rey_goals, and champions_league_goals. Return a table with a column, res.
SELECT la_liga_goals + copa_del_rey_goals + champions_league_goals as res FROM goals

--8 months agoRefactor
-- you will be given a table, goals, with columns la_liga_goals, copa_del_rey_goals, and champions_league_goals. Return a table with a column, res.
SELECT la_liga_goals + copa_del_rey_goals + champions_league_goals as res FROM goals

--8 kyu Grasshopper - Terminal game move function SQL:
--# write your statement here: you will be given a table 'moves' with columns 'position' and 'roll'. return a table with a column 'res'. #--
SELECT position, roll, (position+roll*2) as res FROM moves

--8 kyu Grasshopper - Check for factor SQL:
-- you will be given a table 'kata' with columns 'id', 'base', and 'factor'. 
-- return the 'id' and your result in a column named 'res'.
SELECT id,(base%factor)=0 as res FROM kata

--7 kyu SQL Basics: Raise to the Power SQL:
/*  SQL  */
select POWER(number1,number2) as result from decimals

--8 kyu Even or Odd SQL:
--Write your SQL statement here--

Select 
CASE
    WHEN MOD(number,2)=0 THEN 'Even'
    ELSE 'Odd'
END as is_even
from numbers

-- 8 kyu Century From Year SQL:
--your statment goes here--
SELECT (1 + (yr - 1) / 100) as century FROM years

--8 kyu Expressions Matter SQL:
SELECT GREATEST(a+b+c, a*(b+c), a*b*c, a+b*c, (a+b)*c) as res FROM expression_matter;
/* your query - you are given columns a, b, and c */

8 kyu Is n divisible by x and y? SQL:
-- you will be given a table 'kata' with columns 'n', 'x', and 'y'. Return the 'id' and your result in a column named 'res'.
select 
row_number() over() as id,
case when n%x=0 and n%y=0then true
else false end res
from kata

--7 kyu Sum of angles SQL:
select (n-2)*180 as res from angle

--6 kyu SQL Basics: Simple HAVING SQL:
-- Create your SELECT statement here

SELECT age, COUNT(name) as total_people FROM people 
GROUP BY age
HAVING COUNT(name) >= 10

--6 kyu SQL Basics - Monsters using CASE SQL: /*  SQL  */

SELECT th.id,
heads, 
legs, 
arms, 
tails,  
CASE  
WHEN heads > arms THEN 'BEAST'
WHEN tails > legs THEN 'BEAST'
ELSE 'WEIRDO'
END AS species

FROM top_half th JOIN bottom_half bh on th.id=bh.id
ORDER BY species 

-- 6 kyu SQL Basics: Simple UNION ALL SQL:
-- Create your SELECT statement here
SELECT location,  id, name, price, card_name, card_number, transaction_date FROM
(
SELECT 
'US' as location, id,  name, price, card_name, card_number, transaction_date from ussales  
  WHERE price > 50.00 
UNION ALL 
select 
'EU' as location, id,  name, price, card_name, card_number, transaction_date from eusales 
  WHERE price > 50.00 
  
) as a
ORDER BY location desc, id asc

--6 kyu SQL Basics: Simple WITH SQL:
WITH special_sales 
AS (
SELECT 
d.id,
department_id,
  d.name,
price,
card_name,
card_number,
transaction_date
  FROM sales s
  join departments d on s.department_id = d.id
WHERE Price IN (SELECT Price FROM sales where price > 90.00)
)
SELECT distinct id, name from special_sales
ORDER BY id asc


8 kyu
Even or Odd
SQL:
--Write your SQL statement here--

Select 
CASE
    WHEN MOD(number,2)=0 THEN 'Even'
    ELSE 'Odd'
END as is_even

from numbers


8 kyu
Century From Year
SQL:
--your statment goes here--

SELECT (1 + (yr - 1) / 100) as century FROM years

8 kyu
Expressions Matter
SQL:

SELECT GREATEST(a+b+c, a*(b+c), a*b*c, a+b*c, (a+b)*c) as res FROM expression_matter;

/* your query - you are given columns a, b, and c */

8 kyu
Is n divisible by x and y?
SQL:
-- you will be given a table 'kata' with columns 'n', 'x', and 'y'. Return the 'id' and your result in a column named 'res'.
select 
row_number() over() as id,
case when n%x=0 and n%y=0then true
else false end res
from kata


5 kyu
SQL Basics: Group By Day
SQL:
SELECT CAST(created_at as Date) as day, description, count(*) FROM events
WHERE name like '%trained%'
GROUP BY day, description

7 kyu
Sum of angles
SQL:
select (n-2)*180 as res from angle


